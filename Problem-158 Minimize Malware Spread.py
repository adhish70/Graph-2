# 924. Minimize Malware Spread
# https://leetcode.com/problems/minimize-malware-spread/

# Logic: In the preprocessing steps, we have to first identify number 
# of disconnected components and then assign a group to all the nodes. 
# We then need to count number of nodes per count and infected nodes 
# per group. Lastly, iterate over the initial array and for each element 
# if the infected count is 1 we condiser that node as a possible answer.

# Time Complexity: O(n*n)
# Space Complexity: O(n)

class Solution:
    def dfs(self, graph, i, grouping, count):
        # Base
        if grouping[i] != -1:
            return
        
        # DFS
        grouping[i] = count
        for j in range(len(graph)):
            if graph[i][j] == 1:
                self.dfs(graph, j, grouping, count)
        
        
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        
        # Depicts unvisited or unassigned nodes
        grouping = [-1 for i in range(n)]
        
        count = 0
        # Get group numbers
        for i in range(n):
            if grouping[i] == -1:
                self.dfs(graph, i, grouping, count)
                count += 1
        
        # Get group counts
        group = [0 for i in range(count)]
        for i in range(n):
            group[grouping[i]] += 1
        
        # Get infected counts
        infected = [0 for i in range(count)]
        for i in range(len(initial)):
            infected[grouping[initial[i]]] += 1
        
        minIndex = n
        maxSavedNodes = 0
        
        for i in range(len(initial)):
            node = initial[i]
            grp = grouping[node]
            
            if infected[grp] == 1:
                curSaved = group[grp] - 1
                
                if curSaved == maxSavedNodes:
                    minIndex = min(minIndex, node)
                elif curSaved > maxSavedNodes:
                    maxSavedNodes = curSaved
                    minIndex = node
        return minIndex if minIndex != n else min(initial)